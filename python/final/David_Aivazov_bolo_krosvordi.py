#სახელი მაქვს თავიდანვე გადაკეთებული, არ შეცვალოთ და ისე გაუშვით

# აქ შემოიტანე sityvebismoduli. თუ გსურს, რამე სხვა ფსევდონიმი მიანიჭე
import David_Aivazov_sityvebismoduli as sityvebismoduli

# ქვემოთ ჩამოთვლილ მუდმივები არ შეცვალოთ

# კროსვორდში მოცემული კითხვები
KITXVEBI = {
    1: 'ტკბილი ცივი მკურნალობა, რომელიც უფროსებს და ბავშვებს უყვართ',
    2: 'ადგილი, სადაც ბევრი მარილიანი წყალია. ბევრი მიდის იქ დასასვენებლად',
    3: 'ეკლებით დაფარული ცხოველი',
    4: 'ზღაპარში კონკიას შესახებ, მასში გადაქცეული გოგრა'
}


SITYVEBI_PASUXEBI = {
    1: 'ნაყინი',
    2: 'ზღვა',
    3: 'ზღარბი',
    4: 'ეტლი',
}

# ამას არ შეეხოთ, მე ვამუშავებ
STSORI_PASUXEBI = {
    1: False,
    2: False,
    3: False,
    4: False
}


def mogebis_statusi():
    """
    ამ ფუნქციას გაძლევთ. ხელი არ მოკიდოთ.

    ამოწმებს STSORI_PASUXEBI-ს ლექსიკონში ყველა პასუხი სწორი არის თუ არა,
    რათა main ფუნქციის მთავარი ციკლი ვმართოთ.
    :return: bool ლოგიკური ტიპი
    """
    return False not in STSORI_PASUXEBI.values()


def pasuxis_shemotsmeba(pasuxebi, adgili, sityva):
    """
    ამოწმებს არგუმენტად მიწოდებული სიტყვა, sityva, უდრის თუ არა
    pasuxebi ლექსიკონში adgili-ს ადგილას მოთავსებულ სიტყვას.

    True - sityva უდრის pasuxebi ლექსიკონში adgili გასაღებით მითითებულ
    მნიშვნელობას
    False - sityva არ უდრის pasuxebi ლექსიკონში adgili გასაღებით მითითებულ
    მნიშვნელობას

    :param pasuxebi: dict ლექსიკონი. წარმოადგენს კროსვორდების პასუხებს.
    :param adgili: int მთელრიცხვა მონაცემთა ტიპი. წარმოადგენს კროსვორდის
    პასუხის ადგილს
    :param sityva: str სტრიქონი. წარმოადგენს პასუხს
    :return: bool ლოგიკური ტიპი. True ან False
    """
    # ამ ხაზს გაძლევთ
    STSORI_PASUXEBI[adgili] = True
    # დანარჩენი დასაწერი აქვთ
    if sityva == pasuxebi[adgili]:
        return True
    elif sityva != pasuxebi[adgili]:
        return False


def dabechde_kitxvebi(leqsikoni):
    """
    მოცემული ლექსიკონის თითო გასაღებსა და მის მიერ მითითებულ მნიშვნელობას
    ბეჭდავს კონსოლში.

    :param leqsikoni: dict ლექსიკონი, რომლის გასაღებები არის კროსვორდის
    კითხვის ნომრები და მისი მნიშვნელობები შესატანი სიტყვის მინიშნება.

    მაგალითად,
    {
        1: 'ტკბილი ცივი მკურნალობა, რომელიც უფროსებს და ბავშვებს უყვართ',
        ...
        4: 'ზღაპარში კონკიას შესახებ, მასში გადაქცეული გოგრა'
    }
    """
    for i in leqsikoni:
        print(f"{i}: {leqsikoni[i]}")


def milocva():
    """
    მომხმარებელს ულოცავს კროსვორდის წარმატებულად შევსებას.
    რამე მოლოცვას ბეჭდავს კონსოლში
    """
    print("გილოცავ, მომხმარებელო! შენ წარმატებულად შეავსე კროსვორდი!")
    print("ისევ რამეს კარგ გუსურვებ და გიბეჭდავ ამას კონსოლში!")


def main():
    """
    ბიძაჩვენი, კროსვორდების პელე, კვდება და გვთხოვს, მისი ბავშვობვის
    პირველი კროსვორდი თავიდან დავაწერინოთ. მოდი, მეტიც ვქნათ და პატარა
    პროგრამაც დავუწეროთ. ეს ბოლო საჩუქარი გავუკეთოთ.

    ფუნქციის ბლოკში, კომენტარის სახით გაწერილ ინსტრუქციების მიჰყევით,
    რათა ბოლომდე შეასრულოთ ეს კეთილი საქმე.
    """
    print("გამარჯობა, მომხმარებელო, ახლა უნდა გავუშვათ ბოლო კროსვორდი!")
    print("ქვევით იქნება მოცემული 4 წინადადება, რომელზეც სავარაუდო პასუხი უნდა გასცე.")

    # ამას ხელი არ ახლოთ, მე ვამოწმებ რაღაცას
    mougia = mogebis_statusi()

    # გჩუქნით ამ ციკლს, ლოგიკურად რომ გაიმართოს მთლიანი პროგრამა,
    # და პასუხამდე მისვლა რომ შეძლოთ
    while not mougia:
        # ქვემოთ მოცემული ისტრუქციები ნაბიჯ-ნაბიჯ შეასრულეთ და ციკლის
        # დასაწერი ინსტრუქცები ციკლის ტანში მოათავსეთ

        # 0. გამოიძახე ფუნქცია, რომლითაც დაბეჭდავ ყველა კითხვას,
        # dabechde_kitxvebi და მიაწოდე მუდმივა KITXVEBI არგუმენტად
        dabechde_kitxvebi(KITXVEBI)


        # 1. მომხმარებელს შეატანინე სიტყვა, გასაგები სტრიქონი დაუწერე
        # კონსოლში; ცვლადში შეინახე
        user_text = input("შეიტანე სავარაუდო პასუხი/სიტყვა: ")

        # 2. დაამუშავე შენახული სიტყვა sityvebismoduli-ში გაწერილი
        # sityvis_damushaveba ფუნქციის გამოძახებით
        sityvebismoduli.sityvis_damushaveba(user_text)

        # 3. sityvebismoduli-დან გამოიძახე sityvis_analizi ფუნქცია, და დაბეჭდე
        # ანალიზის შედეგი
        print(sityvebismoduli.sityvis_analizi(user_text))


        # 4. მომხმარებელს ჰკითხე, რა ადგილას სსურს სიტყვის ჩაწერა, ადგილი უნდა იყოს
        # მთელრიცხვა ტიპის მონაცემი
        where = int(input("მომხმარებელო, სად, რა ადგილას გსურს სიტყვის ჩაწერა?: "))

        # 5. შეამოწმე პასუხები, pasuxis_shemotsmeba ფუნქციის გამოძახებით;
        # შედეგი შეინახე ცვლადში
        answer = pasuxis_shemotsmeba(SITYVEBI_PASUXEBI, where, user_text)


        # 6. კონსოლში გამოიტანე მომხმარელის მიერ შეტანილი სიტყვა და ადგილი,
        # და წინა ფუნქციის გამოძახდების შედეგი - სწორი იყო თუ არა
        print(f"შენი/თქვენი(ჩემი ნამვდილად არა) შეტანილი სიტყვა *{user_text}* და ადგილი *{where}*!")
        print(f"წინა ნაბიჯის შედეგი(სწორია/არასწორია): {answer}")
        if answer == False:
            print(f"ანუ !{user_text}! არ არის !მე-{where}! შეკითხვის პასუხი")
        # ამას ხელი არ ახლო, მე მიწერია, რათა მთელი პროგრამა ამუშავდეს,
        # როგორც ველოდეიბ, ისე
        mougia = mogebis_statusi()


    # 7. თუ ციკლიდან გამოვედით, ესე იგი კროსვორდი შევასრულეთ; მომხმარებელს
    # მივულოცოთ! გამოიძახეთ ფუნქცია milocva
    milocva()

main()
